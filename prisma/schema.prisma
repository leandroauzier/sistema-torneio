// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String

  organizedTournaments Tournament[] @relation("Organizer")
  participants Participant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TournamentType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  FREE_FOR_ALL
  ROUND_ROBIN
  SWISS
}

model Tournament {
  id        Int           @id @default(autoincrement())
  name      String
  type      TournamentType
  startDate DateTime?
  endDate   DateTime?

  organizerId Int
  organizer   User        @relation("Organizer", fields: [organizerId], references: [id])

  participants Participant[]
  matches     Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Participant {
  id            Int           @id @default(autoincrement())
  name          String
  tournament    Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId  Int
  wins          Int           @default(0)
  losses        Int           @default(0)
  draws         Int           @default(0)
  score         Float         @default(0.0)
  rank          Int?

  userId        Int?
  user          User?         @relation(fields: [userId], references: [id])

  matchWins     Match[]       @relation("MatchWinner")
  matchParticipants MatchParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tournamentId])
  @@index([userId])
}

enum StatusModel {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

model Match {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  round        Int?
  matchNumber  Int?
  startTime    DateTime?
  endTime      DateTime?
  status       StatusModel?

  winnerId     Int?       
  winner       Participant? @relation("MatchWinner", fields: [winnerId], references: [id])

  participants MatchParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tournamentId])
  @@index([winnerId])
}


model MatchParticipant {
  matchId       Int
  participantId Int
  score         Float?

  match         Match       @relation(fields: [matchId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([matchId, participantId])
  @@index([participantId])
}
